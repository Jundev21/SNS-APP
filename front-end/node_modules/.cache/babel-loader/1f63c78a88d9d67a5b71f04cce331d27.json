{"ast":null,"code":"var _jsxFileName = \"/Users/jun/Desktop/Front-Git/bunjang/src/components/searchBarComponents/RenderAutoCom.tsx\",\n    _s = $RefreshSig$();\n\nimport styled from \"styled-components\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useAppDispatch } from \"../../hooks\";\nimport { setSearchWordTK, setOrderCommandTK } from \"../../redux/dataSlice\";\nimport AutoList from \"./AutoList\";\nimport HistoryList from \"./HistoryList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RenderAutoCom(_ref) {\n  _s();\n\n  let {\n    autoComplete,\n    searchWord,\n    setSearchWord,\n    setSearchList\n  } = _ref;\n  const [searchHistory, setSearchHistory] = useState([]);\n  const dispatch = useAppDispatch();\n  const layOutArea = useRef(null);\n\n  const handleTagName = word => {\n    let getSessionData = sessionStorage.getItem(\"SearchHistory\");\n\n    if (!getSessionData) {\n      sessionStorage.setItem(\"SearchHistory\", JSON.stringify([word]));\n    } else {\n      let historyArr = JSON.parse(getSessionData);\n\n      if (historyArr.length > 6) {\n        historyArr.pop();\n      }\n\n      historyArr.unshift(word);\n      let newData = new Set(historyArr);\n      let makeArr = [...newData];\n      sessionStorage.setItem(\"SearchHistory\", JSON.stringify(makeArr));\n    }\n\n    setSearchList(false);\n    setSearchWord(word);\n    dispatch(setSearchWordTK(word));\n    dispatch(setOrderCommandTK(\"date\"));\n  };\n\n  useEffect(() => {\n    const initSessionData = () => {\n      let getSessionData = sessionStorage.getItem(\"SearchHistory\");\n\n      if (getSessionData) {\n        let historyArr = JSON.parse(getSessionData);\n        setSearchHistory(historyArr);\n      }\n    };\n\n    initSessionData();\n    return () => {\n      initSessionData();\n    };\n  }, []);\n  useEffect(() => {\n    let outSideArea = e => {\n      if (layOutArea.current !== null) {\n        if (!layOutArea.current.contains(e.target)) {\n          setSearchList(false);\n        }\n      }\n    };\n\n    document.addEventListener(\"mousedown\", outSideArea);\n    return () => {\n      document.removeEventListener(\"mousedown\", outSideArea);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(SearchList, {\n    ref: layOutArea,\n    children: searchWord === \"\" ? /*#__PURE__*/_jsxDEV(HistoryList, {\n      searchHistory: searchHistory,\n      handleTagName: handleTagName,\n      setSearchHistory: setSearchHistory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(AutoList, {\n      autoComplete: autoComplete,\n      handleTagName: handleTagName,\n      searchWord: searchWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RenderAutoCom, \"dUmTohKfF3p7mHBfi28kJVfGT9g=\", false, function () {\n  return [useAppDispatch];\n});\n\n_c = RenderAutoCom;\nexport default RenderAutoCom;\nconst SearchList = styled.div`\n  position: absolute;\n  margin-top: 20px;\n  border: 1px solid rgb(217, 217, 217);\n  background: rgb(255, 255, 255);\n  width: 100%;\n  left: 0;\n  height: 330px;\n  max-height: 500px;\n  overflow-y: auto;\n`;\n_c2 = SearchList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RenderAutoCom\");\n$RefreshReg$(_c2, \"SearchList\");","map":{"version":3,"sources":["/Users/jun/Desktop/Front-Git/bunjang/src/components/searchBarComponents/RenderAutoCom.tsx"],"names":["styled","React","useEffect","useState","useRef","useAppDispatch","setSearchWordTK","setOrderCommandTK","AutoList","HistoryList","RenderAutoCom","autoComplete","searchWord","setSearchWord","setSearchList","searchHistory","setSearchHistory","dispatch","layOutArea","handleTagName","word","getSessionData","sessionStorage","getItem","setItem","JSON","stringify","historyArr","parse","length","pop","unshift","newData","Set","makeArr","initSessionData","outSideArea","e","current","contains","target","document","addEventListener","removeEventListener","SearchList","div"],"mappings":"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","sourcesContent":["import styled from \"styled-components\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useAppDispatch } from \"../../hooks\";\nimport { setSearchWordTK, setOrderCommandTK } from \"../../redux/dataSlice\";\nimport AutoList from \"./AutoList\";\nimport HistoryList from \"./HistoryList\";\n\ninterface AutoCompType {\n  autoComplete: {\n    name: string;\n  }[];\n  setSearchWord: React.Dispatch<React.SetStateAction<string>>;\n  setSearchList: React.Dispatch<React.SetStateAction<boolean>>;\n  searchWord: string;\n}\n\nfunction RenderAutoCom({\n  autoComplete,\n  searchWord,\n  setSearchWord,\n  setSearchList,\n}: AutoCompType) {\n  const [searchHistory, setSearchHistory] = useState<Array<string>>([]);\n  const dispatch = useAppDispatch();\n  const layOutArea = useRef<HTMLDivElement>(null);\n  \n  const handleTagName = (word: string) => {\n    let getSessionData = sessionStorage.getItem(\"SearchHistory\");\n\n    if (!getSessionData) {\n      sessionStorage.setItem(\"SearchHistory\", JSON.stringify([word]));\n    } else {\n      let historyArr: Array<string> = JSON.parse(getSessionData);\n\n      if(historyArr.length>6){\n        historyArr.pop();\n      }\n      historyArr.unshift(word);\n      let newData = new Set(historyArr);\n      let makeArr = [...newData];\n      sessionStorage.setItem(\"SearchHistory\", JSON.stringify(makeArr));\n    }\n\n    setSearchList(false);\n    setSearchWord(word);\n    dispatch(setSearchWordTK(word));\n    dispatch(setOrderCommandTK(\"date\"));\n  };\n\n  useEffect(() => {\n    const initSessionData = () => {\n      let getSessionData = sessionStorage.getItem(\"SearchHistory\");\n\n      if (getSessionData) {\n        let historyArr: Array<string> = JSON.parse(getSessionData);\n        setSearchHistory(historyArr);\n      }\n    };\n    initSessionData();\n\n    return () => {\n      initSessionData();\n    };\n  }, []);\n\n  useEffect(() => {\n    let outSideArea = (e: any) => {\n      if (layOutArea.current !== null) {\n        if (!layOutArea.current.contains(e.target)) {\n          setSearchList(false);\n        }\n      }\n    };\n\n    document.addEventListener(\"mousedown\", outSideArea);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", outSideArea);\n    };\n  });\n\n  return (\n    <SearchList ref={layOutArea}>\n      {searchWord === \"\" ? (\n        <HistoryList\n          searchHistory={searchHistory}\n          handleTagName={handleTagName}\n          setSearchHistory={setSearchHistory}\n        />\n      ) : (\n        <AutoList\n          autoComplete={autoComplete}\n          handleTagName={handleTagName}\n          searchWord={searchWord}\n        />\n      )}\n    </SearchList>\n  );\n}\n\nexport default RenderAutoCom;\n\nconst SearchList = styled.div`\n  position: absolute;\n  margin-top: 20px;\n  border: 1px solid rgb(217, 217, 217);\n  background: rgb(255, 255, 255);\n  width: 100%;\n  left: 0;\n  height: 330px;\n  max-height: 500px;\n  overflow-y: auto;\n`;\n"]},"metadata":{},"sourceType":"module"}